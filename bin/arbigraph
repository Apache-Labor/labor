#!/bin/bash
#
# arbigraph
#
# A very simple gnuplot grapher of arbitrary numeric data in a single column.
#
# Example:
#
# cat /var/log/syslog | cut -f4 -d" " | cut -d: -f1 | uniq -c | arbigraph
#
# <-- START OUTPUT -->
#
#     +---------------+---------------+----------------+---------------+---------------+---------------+
#     +               +               +                +               +               +               +
#  35 ++                                                         ************                         ++
#     |                                                          *          *                          |
#     |                                                          *          *    ************          |
#     |                                                          *          *    *          *          |
#  30 ++                                                         *          *    *          *         ++
#     |                                          ************    *          *    *          *          |
#     |          ************                    *          *    *          *    *          *          |
#  25 ++         *          *                    *          *    *          *    *          *         ++
#     |          *          *    ************    *          *    *          *    *          *          |
#     |          *          *    *          *    *          *    *          *    *          *          |
#  20 ++         *          *    *          *    *          *    *          *    *          *         ++
#     |          *          *    *          *    *          *    *          *    *          *          |
#     |          *          *    *          *    *          *    *          *    *          *          |
#     |          *          *    *          *    *          *    *          *    *          *     ******
#  15 ++         *          *    *          *    *          *    *          *    *          *     *   +*
#  15 ++         *          *    *          *    *          *    *          *    *          *     *   +*
#     ******     *          *    *          *    *          *    *          *    *          *     *    *
#     *    *     *          *    *          *    *          *    *          *    *          *     *    *
#  10 *+   *     *          *    *          *    *          *    *          *    *          *     *   +*
#     *    *     *          *    *          *    *          *    *          *    *          *     *    *
#     *    *     *          *    *          *    *          *    *          *    *          *     *    *
#     *    *     *          *    *          *    *          *    *          *    *          *     *    *
#   5 *+   *     *          *    *          *    *          *    *          *    *          *     *   +*
#     *    *     *          *    *          *    *          *    *          *    *          *     *    *
#     *    *     *    +     *    *    +     *    *     +    *    *     +    *    *     +    *     *    *
#   0 ******-----************----************----************----************----************-----******
#     0               1               2                3               4               5               6
#
# THE GNUPLOT SCRIPT
# ------------------
# set terminal dumb 105 30;  set boxwidth 0.666666666666667; plot [0:6][0:38.5] "/tmp/fileVdL9wt" using 1:2
#  title "" with boxes
#
# THE DATA
# --------
# 0 14 06
# 1 26 07
# 2 24 08
# 3 28 09
# 4 35 10
# 5 33 11
# 6 17 12
#
# <-- END OUTPUT -->


function usage {
        echo
        echo "<STDIN> | `basename $0` [OPTIONS] "
        echo
        echo "A script to plot a simple graph"
        echo
        echo " -c  --columnnames STR     Name for columns. Seperate by ';'."
        echo " -C  --custom STR          Custom arbitrary gnuplot directives; will be placed right"
	echo "                           before the plot directive. Separate commands with semicolon."
        echo " -d  --dots                Graph with dots instead of blocks"
        echo " -h  --help                This text"
        echo " -H  --height  STR         Graph height in characters"
        echo " -l  --lines               Graph with lines instead of blocks"
        echo "     --label               Additional text inside the graph. Default positioned top left"
        echo " -L  --logscale            Logarithmic scale. Default is normale scale."
        echo " -m  --minx STR            Starting value of x-axis. Default is $MINX"
        echo " -n  --noscript            Do not output the script below the graph"
        echo " -o  --output STR          Write graph into a file (png)"
        echo " -s  --sameaxis            Use the same y-axis. Default is seperate axis"
        echo " -t  --title STR           Title of graph"
        echo " -w  --width STR           Width of graph (terminal actually). Default is terminal width"
        echo " -2                        Usa an additional, second data column"
        echo
        echo "Example: "
        echo " ls -l /tmp | head -15 | grep -v total | awk '{ print \$5 \" \" \$9 } ' | arbigraph"
        echo
        echo "Arbigraph will graph the first column. Subsequent columns are ignored."
        echo "The X-axis is actually the line number of a value."
        echo "Command line option \"minx\" therefore defines the"
        echo "starting point of the line numbering."
	echo 
	echo "If you work with --label, you can reposition it to the right by adding \"(right)\""
	echo "inside the label text. This will not be printed. You can use \\n to get a CR."
        echo
        echo "This is arbigraph version $VERSION."
}

function set_columnnames {
        COL1=`echo "$1" | cut -d';' -f1`
        COL2=`echo "$1" | cut -d';' -f2`
}
export TRUE=-1
export FALSE=0

VERSION="2010-10-19"
NOSCRIPT=$FALSE
HEIGHT=30               # graph height in characters
STYLE="boxes"           # gnuplot style
GP=`tempfile`           # gnuplot file
DATA=`tempfile`         # data file
DATACOLUMNS=1           # there is a single data column
MINX=1                  # the default minimal value X is 1
WIDTH=""                # width passed via command line
SAMEAXIS=0              # use the same yaxis
LOGSCALE=0              # Use logscale on y axis. Default is 0 (= off)
COL1="Col 1"            # Name of Column 1
COL2="Col 2"            # Name of Column 2
TITLE=""                # Title of graph
CUSTOM_DIRECTIVES=""    # Custom arbitrary gnuplot directives to be passed via CLI


# param checking loop
while [ $# -gt 0 ]
do
  case $1
  in
  -d) export STYLE="dots"; shift 1;;
  --dots) export STYLE="dots";shift 1;;
    -c) set_columnnames "$2"; shift 2;;
    --columnnames) set_columnnames "$2"; shift 2;;
    -C) export CUSTOM_DIRECTIVES="$2"; shift 2;;
    --custom) export CUSTOM_DIRECTIVES="$2"; shift 2;;
    -h) usage; exit;;
    --help) usage; exit;;
    -H) export HEIGHT=$2; shift 2;;
    --height) export HEIGHT=$2; shift 2;;
    -l) export STYLE="lines"; shift 1;;
    --lines) export STYLE="lines";shift 1;;
    --label) export LABEL="$2";shift 2;;
    -L) export LOGSCALE=1; shift 1;;
    --logscale) export LOGSCALE=1; shift 1;;
    -m) export MINX="$2"; shift 1;;
    --minx) export MINX="$2";shift 1;;
    -n) export NOSCRIPT="$TRUE"; shift 1;;
    --noscript) export NOSCRIPT="$TRUE";shift 1;;
    -s) export SAMEAXIS=1; shift 1;;
    --sameaxis) export SAMEAXIS=1; shift 1;;
    -t) export TITLE="$2"; shift 2;;
    --title) export TITLE="$2"; shift 2;;
    -o) export OUTPUT="set output \"$2\"; "; OUTPUTFILE="$2"; shift 2;;
    --output) export OUTPUT="set output \"$2\"; "; OUTPUTFILE="$2"; shift 2;;
    -w) export WIDTH="$2"; shift 1;;
    --width) export WIDTH="$2"; shift 1;;
    -2) export DATACOLUMNS=2; shift 1;;
    *) shift 1;;
  esac
done


# -----------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------


N=$MINX            # add line numbering
while read line; do     # read STDIN
        echo  "$N $line" | sed 's/-/\\n-\\n/' >> $DATA
        N=$(($N+1))
done

head -1 $DATA | grep -P -q "\t"
if [ $? -eq 0 ]; then
	LABELS_IN_FILE="$TRUE"
else
	LABELS_IN_FILE="$FALSE"
fi

if [ $SAMEAXIS -eq 0 ]; then
	if [ "$LABELS_IN_FILE" = "$TRUE" ]; then
        	MAXY=`cat $DATA | tr "\t" " " | cut -d' ' -f3 | sort -n | tail -1`    # maximum y value
	else
        	MAXY=`cat $DATA | cut -d' ' -f2 | sort -n | tail -1`    # maximum y value
	fi
        MAXY=`perl -e "print 1.1 * $MAXY;" 2>/dev/null`                     # maximum y value stretched by 10%
	if [ $? -ne 0 ]; then
		echo "There is something wrong with the calculation of the y axes. This is fatal. Aborting."
		exit 1
	fi
        if [ $DATACOLUMNS = 2 ]; then
                MAXY2=`cat $DATA | cut -d' ' -f3 | sort -n | tail -1`    # maximum y value
                MAXY2=`perl -e "print 1.1 * $MAXY2;"`                     # maximum y value stretched by 10%
        fi
else
        MAXY=`(cat $DATA | cut -d' ' -f2; cat $DATA | cut -d' ' -f3;) | sort -n | tail -1`    # maximum y value collected from both data columns
        MAXY=`perl -e "print 1.1 * $MAXY;"`                     # maximum y value stretched by 10%
        MAXY2=$MAXY
fi

MAXX=$N                                                 # maximum x value


BD=1 				                        # boxwith
#BD=`perl -e "print 4.0/$MAXX;"`                        # boxwith. This is a good value for MAXX from 5 to 40
if [ "$WIDTH" == "" ]; then
        TW=`tput cols`                                  # terminal width
else
        TW=$WIDTH
fi


if [ ! -z "$LABEL" ]; then
	POS="$MAXX*0.03,$MAXY*0.95 left"
	if [ `echo "$LABEL" | grep "(right)" | wc -l` -eq 1 ]; then
		TMPL=`echo $LABEL | sed -e "s/(right)//"`
		LABEL=$TMPL
		POS="$MAXX*0.97,$MAXY*0.85 right"
	fi
	LABEL="set label 2 \"$LABEL\" at $POS; "
fi

if [ "$LOGSCALE" -eq 1 ]; then
	DOLOGSCALE="set logscale y;"
	MINY="1"
else
	DOLOGSCALE=";"
	MINY="0"
fi

TERMINAL="dumb"

if [ ! -z "$OUTPUT" ]; then
        TERMINAL="png"
fi


if [ $STYLE == "boxes" ]; then


	if [ $DATACOLUMNS = 1 ]; then
		if [ "$LABELS_IN_FILE" = "$TRUE" ]; then
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set format x \"\\n\\n\"; set title \"$TITLE\"; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES;  plot \"$DATA\" using 1:3:xtic(2) title \"$COL1\" with $STYLE" > $GP
		else
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set title \"$TITLE\"; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES;  plot [$MINX:$MAXX][$MINY:$MAXY] \"$DATA\" using 1:2 title \"$COL1\" with $STYLE" > $GP
		fi
	else
		echo "Boxes style does not work with more than one data column. This is fatal. Aborting."
		exit 1
	fi
else 
	if [ $DATACOLUMNS = 1 ]; then
		if [ "$LABELS_IN_FILE" = "$TRUE" ]; then
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set format x \"\\n\\n\"; set title \"$TITLE\"; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES;  plot [$MINX:$MAXX][$MINY:$MAXY] \"$DATA\" using 1:3:xtic(2) title \"$COL1\" with $STYLE" > $GP
		else
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set title \"$TITLE\"; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES;  plot [$MINX:$MAXX][$MINY:$MAXY] \"$DATA\" using 1:2 title \"$COL1\" with $STYLE" > $GP
		fi
	else
		if [ "$LABELS_IN_FILE" = "$TRUE" ]; then
			#echo "Multiple data columns style has not been implemented with labels in file. Please use input file without labels. Aborting."
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set title \"$TITLE\"; set y2tics; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES; plot [$MINX:$MAXX][$MINY:$MAXY][$MINX:$MAXX][$MINY:$MAXY2] \"$DATA\" using 1:3:xtic(2) title \"$COL1\" axis x1y1 with $STYLE, \"$DATA\" using 1:4 title \"$COL2\" axis x1y2 with $STYLE;" > $GP
		else
			echo "set terminal $TERMINAL $TW $HEIGHT; $OUTPUT set boxwidth $BD; set title \"$TITLE\"; set y2tics; $DOLOGSCALE; $LABEL; $CUSTOM_DIRECTIVES; plot [$MINX:$MAXX][$MINY:$MAXY][$MINX:$MAXX][$MINY:$MAXY2] \"$DATA\" using 1:2 title \"$COL1\" axis x1y1 with $STYLE, \"$DATA\" using 1:3 title \"$COL2\" axis x1y2 with $STYLE;" > $GP
		fi
	fi
fi

gnuplot $GP


if [ "$NOSCRIPT" = "$FALSE" ]; then
        echo "THE GNUPLOT SCRIPT"
        echo "------------------"
        cat $GP
	echo
	echo "The transformed datafile $DATA is left for future use."
	echo
	rm $GP
else
	rm $GP $DATA
fi

if [ ! -z "$OUTPUT" ]; then
        echo "Plot written to file $OUTPUTFILE."
fi

